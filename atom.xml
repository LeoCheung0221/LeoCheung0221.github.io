<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Leo&#39;s home</title>
  <subtitle>Some of life, you have to go to the great challanges. -By Kobe Bryant</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tufusi.com/"/>
  <updated>2016-06-14T13:10:00.135Z</updated>
  <id>http://tufusi.com/</id>
  
  <author>
    <name>Leo Cheung</name>
    <email>leocheung4ever@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>AndroidStudio之Plugins</title>
    <link href="http://tufusi.com/2016/06/14/AndroidStudio%E4%B9%8BPlugins/"/>
    <id>http://tufusi.com/2016/06/14/AndroidStudio之Plugins/</id>
    <published>2016-06-14T13:10:00.000Z</published>
    <updated>2016-06-14T13:10:00.135Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android Studio 之 Gradle</title>
    <link href="http://tufusi.com/2016/06/07/AndroidStudio%E4%B9%8BGradle/"/>
    <id>http://tufusi.com/2016/06/07/AndroidStudio之Gradle/</id>
    <published>2016-06-07T11:31:22.000Z</published>
    <updated>2016-06-07T11:36:48.657Z</updated>
    
    <content type="html">&lt;p&gt;Gradle是可以用于Android开发的新一代的 Build System， 也是 Android Studio默认的build工具。&lt;/p&gt;
&lt;p&gt;Gradle脚本是基于一种JVM语言 – Groovy，再加上DSL（领域特定语言）组成的。&lt;/p&gt;
&lt;p&gt;因为Groovy是JVM语言，所以可以使用大部分的Java语言库。所谓DSL就是专门针对Android开发的插件，比如标准Gradle之外的一些新的方法（Method）、闭包（Closure）等。&lt;/p&gt;
&lt;p&gt;由于Gradle的语法足够简洁，而且可以使用大部分的java包，当之无愧地成为新一代 Build System。&lt;/p&gt;
&lt;p&gt;使用Android Studio新建一个工程后，默认会生成两个build.gralde文件，一个位于工程根目录，一个位于app目录下。还有另外一个文件 –settings.gradle。&lt;/p&gt;
&lt;p&gt;根目录下的脚本文件是针对module的全局配置，它的作用阈所包含的所有 module 是通过settings.gradle来配置。&lt;/p&gt;
&lt;p&gt;app文件夹就是一个module，如果在当前工程中添加了一个新的module – lib，就需要在settings.gralde文件中包含这个新的module。&lt;/p&gt;
&lt;p&gt;gradle脚本的基本结构&lt;/p&gt;
&lt;p&gt;用我现在的工程举例来说，根目录的build.gradle的内容如下所示：&lt;br&gt;?&lt;br&gt;1&lt;br&gt;2&lt;br&gt;3&lt;br&gt;4&lt;br&gt;5&lt;br&gt;6&lt;br&gt;7&lt;br&gt;8&lt;br&gt;9&lt;br&gt;10&lt;br&gt;11&lt;br&gt;12&lt;br&gt;13&lt;br&gt;14&lt;br&gt;15&lt;br&gt;16&lt;br&gt;17&lt;br&gt;18&lt;br&gt;19&lt;br&gt;20&lt;br&gt;21&lt;br&gt;22&lt;br&gt;23&lt;/p&gt;
&lt;p&gt;// Top-level build file where you can add configuration options common to all sub-projects/modules.&lt;/p&gt;
&lt;p&gt;buildscript {&lt;br&gt;    repositories {&lt;br&gt;        jcenter()&lt;br&gt;    }&lt;br&gt;    dependencies {&lt;br&gt;        classpath ‘com.android.tools.build:gradle:1.0.0-rc4’&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    // NOTE: Do not place your application dependencies here; they belong
    // in the individual module build.gradle files
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;allprojects {&lt;br&gt;    repositories {&lt;br&gt;        jcenter()&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    maven {
        url &amp;apos;http://mvnrepo.xxx.com/mvn/repository&amp;apos;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;classpath ‘com.android.tools.build:gradle:1.0.0-rc4’就是Android特有的插件，maven仓库位于通过方法jCenter() 获取，这也是默认的maven仓库。当然也可以添加额外的maven仓库地址，例如以上文件中的&lt;br&gt;?&lt;br&gt;1&lt;br&gt;2&lt;br&gt;3&lt;/p&gt;
&lt;p&gt;maven {&lt;br&gt;    url ‘&lt;a href=&quot;http://mvnrepo.xxx.com/mvn/repository&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://mvnrepo.xxx.com/mvn/repository&lt;/a&gt;‘&lt;br&gt;}&lt;/p&gt;
&lt;p&gt;然后是 settings.gradle 文件：&lt;br&gt;?&lt;br&gt;1&lt;/p&gt;
&lt;p&gt;include ‘:app’&lt;/p&gt;
&lt;p&gt;app就是项目包含的一个module，如果有多个module，可以在为 include 方法添加多个参数。&lt;/p&gt;
&lt;p&gt;最后是app/build.gradle&lt;br&gt;?&lt;br&gt;1&lt;br&gt;2&lt;br&gt;3&lt;br&gt;4&lt;br&gt;5&lt;br&gt;6&lt;br&gt;7&lt;br&gt;8&lt;br&gt;9&lt;br&gt;10&lt;br&gt;11&lt;br&gt;12&lt;br&gt;13&lt;br&gt;14&lt;br&gt;15&lt;br&gt;16&lt;br&gt;17&lt;br&gt;18&lt;br&gt;19&lt;br&gt;20&lt;br&gt;21&lt;br&gt;22&lt;br&gt;23&lt;br&gt;24&lt;br&gt;25&lt;br&gt;26&lt;br&gt;27&lt;br&gt;28&lt;br&gt;29&lt;br&gt;30&lt;br&gt;31&lt;br&gt;32&lt;br&gt;33&lt;br&gt;34&lt;br&gt;35&lt;br&gt;36&lt;br&gt;37&lt;br&gt;38&lt;br&gt;39&lt;br&gt;40&lt;br&gt;41&lt;br&gt;42&lt;br&gt;43&lt;br&gt;44&lt;br&gt;45&lt;br&gt;46&lt;br&gt;47&lt;br&gt;48&lt;br&gt;49&lt;br&gt;50&lt;br&gt;51&lt;br&gt;52&lt;br&gt;53&lt;br&gt;54&lt;br&gt;55&lt;br&gt;56&lt;br&gt;57&lt;br&gt;58&lt;br&gt;59&lt;br&gt;60&lt;br&gt;61&lt;br&gt;62&lt;br&gt;63&lt;br&gt;64&lt;br&gt;65&lt;br&gt;66&lt;br&gt;67&lt;br&gt;68&lt;br&gt;69&lt;br&gt;70&lt;/p&gt;
&lt;p&gt;apply plugin: ‘com.android.application’&lt;/p&gt;
&lt;p&gt;android {&lt;br&gt;    compileSdkVersion 21&lt;br&gt;    buildToolsVersion “21.1.1”&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_7
    targetCompatibility JavaVersion.VERSION_1_7
}


defaultConfig {
    applicationId &amp;quot;your.application.id&amp;quot;
    minSdkVersion 14
    targetSdkVersion 21
    versionCode 2
    versionName &amp;quot;2.0.0&amp;quot;
}

signingConfigs {
    release {
        storeFile file(&amp;apos;release.keystore&amp;apos;)
        storePassword &amp;quot;yourstorepassword&amp;quot;
        keyAlias &amp;quot;yourkeyalias&amp;quot;
        keyPassword &amp;quot;yourkeypassword&amp;quot;
    }
    debug {
        storeFile file(&amp;apos;debug.keystore&amp;apos;)
    }
}

buildTypes {
    release {
        minifyEnabled true
        proguardFiles getDefaultProguardFile(&amp;apos;proguard-android.txt&amp;apos;), &amp;apos;proguard-rules.pro&amp;apos;
        signingConfig signingConfigs.release
    }
    debug {
        signingConfig signingConfigs.debug
    }
}

productFlavors {
    inner {
        applicationId &amp;quot;your.application.inner.id&amp;quot;
        versionName &amp;quot;2.0.0&amp;quot;
    }

    market {

    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;repositories {&lt;br&gt;    flatDir {&lt;br&gt;        dirs ‘libs’&lt;br&gt;    }&lt;br&gt;}&lt;/p&gt;
&lt;p&gt;dependencies {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 通用
compile name: &amp;apos;volley&amp;apos;, ext: &amp;apos;aar&amp;apos;
compile &amp;apos;com.nostra13.universalimageloader:universal-image-loader:1.9.3&amp;apos;
compile &amp;apos;com.alibaba:fastjson:latest.integration&amp;apos;

// 项目相关（已删除）
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;Groovy 的基本语法&lt;br&gt;方法调用&lt;br&gt;?&lt;br&gt;1&lt;/p&gt;
&lt;p&gt;apply plugin: ‘com.android.application’&lt;/p&gt;
&lt;p&gt;以上语句中的apply是一个方法，给它传递了一个参数plugin，plugin 的值是’com.android.application’。&lt;/p&gt;
&lt;p&gt;如果有多个参数，则以逗号隔开，例如&lt;br&gt;?&lt;br&gt;1&lt;/p&gt;
&lt;p&gt;&lt;code&gt;compile name: ‘volley’, ext: ‘aar’&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;闭包&lt;/p&gt;
&lt;p&gt;Groovy中花括号包含的部分成为一个闭包（Closure）。例如下面的代码&lt;br&gt;?&lt;br&gt;1&lt;br&gt;2&lt;br&gt;3&lt;br&gt;4&lt;/p&gt;
&lt;p&gt;compileOptions {&lt;br&gt;    sourceCompatibility JavaVersion.VERSION_1_7&lt;br&gt;    targetCompatibility JavaVersion.VERSION_1_7&lt;br&gt;}&lt;/p&gt;
&lt;p&gt;compileOptions 是一个 Method， 它的参数是一个闭包，这个闭包内依次执行了两个方法 – sourceCompatibility 和targetCompatibility， 参数都是JavaVersion.VERSION17。&lt;/p&gt;
&lt;p&gt;闭包也可以嵌套包含&lt;br&gt;?&lt;br&gt;1&lt;br&gt;2&lt;br&gt;3&lt;br&gt;4&lt;br&gt;5&lt;/p&gt;
&lt;p&gt;repositories {&lt;br&gt;    flatDir {&lt;br&gt;        dirs ‘libs’&lt;br&gt;    }&lt;br&gt;}&lt;/p&gt;
&lt;p&gt;常见使用方法&lt;br&gt;包依赖（aar）&lt;/p&gt;
&lt;p&gt;使用aar时可以分为两种情况&lt;br&gt;① aar位于本地目录&lt;/p&gt;
&lt;p&gt;首先在 android 的参数闭包中添加调用方法 repositories&lt;br&gt;1 repositories {&lt;br&gt;2         flatDir {&lt;br&gt;3        dirs ‘libs’&lt;br&gt;4     }&lt;br&gt;5 }   &lt;/p&gt;
&lt;p&gt;然后在 dependencies 的参数闭包中添加&lt;br&gt;1 compile name: ‘volley’, ext: ‘aar’&lt;/p&gt;
&lt;p&gt;② aar位于远程仓库&lt;/p&gt;
&lt;p&gt;这里以maven为例，当然也可以使用其他类型的仓库，例如 Ivy。&lt;/p&gt;
&lt;p&gt;只需要在jar包引用方式后面添加一个@aar就可以了&lt;br&gt;1 compile ‘com.alibaba:fastjson:latest.integration@aar’&lt;/p&gt;
&lt;p&gt;包依赖（jar）&lt;br&gt;1 compile group: ‘com.alibaba’, module: ‘fastjson’, version: ‘latest.integration’&lt;/p&gt;
&lt;p&gt;可以简写成&lt;br&gt;1 compile ‘com.alibaba:fastjson:latest.integration’&lt;/p&gt;
&lt;p&gt;latest.integration可以替换成具体的版本号，这里是获取服务器上的最新版本。&lt;br&gt;去掉重复依赖&lt;/p&gt;
&lt;p&gt;1 compile ‘com.alibaba.fastjson.latest.integration’ {&lt;br&gt;2     exclude module: ‘annotations’, group: ‘com.google.android’&lt;br&gt;3 }&lt;/p&gt;
&lt;p&gt;使用 Java7&lt;/p&gt;
&lt;p&gt;1 compileOptions {&lt;br&gt;2      sourceCompatibility JavaVersion.VERSION_1_7&lt;br&gt;3      targetCompatibility JavaVersion.VERSION_1_7&lt;br&gt;4 }&lt;/p&gt;
&lt;p&gt;productFlavors&lt;/p&gt;
&lt;p&gt;针对不同的APP分发渠道，我们可以定义不同的 product flavor。也可以定义内部版本和外部版本，内部版本中包含了一些调试代码，这些代码在发布时并不会被编译进最后的APP中。而且可以分别为内部版本和外部版本指定不同的ApplicationId，这样在同一个设备上可以同时安装两个版本以方便调试。&lt;br&gt;命令行执行Gradle脚本&lt;/p&gt;
&lt;p&gt;在Android工程根目录下会自动生成一个shell脚本 - gradlew，执行之前记得加上x属性 - chomod +x gradlew&lt;/p&gt;
&lt;p&gt;gradle脚本中包含了很多 task，可以通过task名来指定需要执行的task。&lt;br&gt;./gradlew build./gradlew assemble./gradlew assembleInnderDebug&lt;br&gt;总结&lt;/p&gt;
&lt;p&gt;不得不说，Gradle实在太好用了！虽然 Gradle 可以与 Ant 或 maven 配合使用，但是其简洁和功能性远远超过其他两个。我现在开发的项目普遍使用的是 maven，不知道什么原因，使用Gradle时经常会遇到一些无法获取远程依赖包的问题，最简单的解决办法就是把依赖包下载的本地。&lt;/p&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;Gradle是可以用于Android开发的新一代的 Build System， 也是 Android Studio默认的build工具。&lt;/p&gt;
&lt;p&gt;Gradle脚本是基于一种JVM语言 – Groovy，再加上DSL（领域特定语言）组成的。&lt;/p&gt;
&lt;p&gt;因为Groov
    
    </summary>
    
    
      <category term="Gradle，Android，BuildSystem" scheme="http://tufusi.com/tags/Gradle%EF%BC%8CAndroid%EF%BC%8CBuildSystem/"/>
    
  </entry>
  
  <entry>
    <title>Android部落格之RxJava框架</title>
    <link href="http://tufusi.com/2016/06/07/Android%E9%83%A8%E8%90%BD%E6%A0%BC%E4%B9%8BRxJava%E6%A1%86%E6%9E%B6/"/>
    <id>http://tufusi.com/2016/06/07/Android部落格之RxJava框架/</id>
    <published>2016-06-07T01:14:57.000Z</published>
    <updated>2016-06-07T01:14:57.750Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android部落格之Retrofit框架</title>
    <link href="http://tufusi.com/2016/06/02/Android%E9%83%A8%E8%90%BD%E6%A0%BC%E4%B9%8BRetrofit%E6%A1%86%E6%9E%B6/"/>
    <id>http://tufusi.com/2016/06/02/Android部落格之Retrofit框架/</id>
    <published>2016-06-02T01:23:58.000Z</published>
    <updated>2016-06-02T01:23:58.913Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android部落格之OkHttp框架</title>
    <link href="http://tufusi.com/2016/06/01/Android%E9%83%A8%E8%90%BD%E6%A0%BC%E4%B9%8BOkHttp%E6%A1%86%E6%9E%B6/"/>
    <id>http://tufusi.com/2016/06/01/Android部落格之OkHttp框架/</id>
    <published>2016-06-01T02:20:47.000Z</published>
    <updated>2016-06-06T14:11:03.932Z</updated>
    
    <content type="html">&lt;p&gt;OkHttp&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;官网概述：Android和Java应用程序的HTTP&amp;amp;HTTP/2的客户端&lt;/p&gt;
&lt;/blockquote&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;OkHttp&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;官网概述：Android和Java应用程序的HTTP&amp;amp;HTTP/2的客户端&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="HTTP Client" scheme="http://tufusi.com/categories/HTTP-Client/"/>
    
    
      <category term="技术" scheme="http://tufusi.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络通信" scheme="http://tufusi.com/tags/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>十里平湖霜满天</title>
    <link href="http://tufusi.com/2016/05/31/%E5%8D%81%E9%87%8C%E5%B9%B3%E6%B9%96%E9%9C%9C%E6%BB%A1%E5%A4%A9/"/>
    <id>http://tufusi.com/2016/05/31/十里平湖霜满天/</id>
    <published>2016-05-31T09:27:09.000Z</published>
    <updated>2016-05-31T09:28:15.759Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="闲心 品读 人生" scheme="http://tufusi.com/tags/%E9%97%B2%E5%BF%83-%E5%93%81%E8%AF%BB-%E4%BA%BA%E7%94%9F/"/>
    
  </entry>
  
</feed>
